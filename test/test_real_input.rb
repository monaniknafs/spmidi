require 'test/unit'
require_relative '../lib/spmidi/note'
require_relative '../lib/spmidi/viterbi'
require_relative '../lib/spmidi/hmm'
require_relative '../lib/spmidi/pattern_inference'

module SPMidi
  class TestRealInput < Test::Unit::TestCase
    def test_good_input
        real_2 = [
        Note.new([144, 59, 73], 0.1, 2497.0879554748535),
        Note.new([144, 62, 64], 0.1, 225.04377365112305),
        Note.new([144, 64, 67], 0.1, 246.0780143737793),
        Note.new([144, 65, 64], 0.1, 183.44688415527344),
        Note.new([144, 59, 73], 0.1, 178.0099868774414),
        Note.new([144, 62, 67], 0.1, 174.01480674743652),
        Note.new([144, 64, 61], 0.1, 222.97000885009766),
        Note.new([144, 65, 69], 0.1, 191.90406799316406),
        Note.new([144, 59, 67], 0.1, 197.45588302612305),
        Note.new([144, 62, 66], 0.1, 158.56313705444336),
        Note.new([144, 64, 65], 0.1, 231.77480697631836),
        Note.new([144, 65, 52], 0.1, 211.52520179748535),
        Note.new([144, 59, 61], 0.1, 158.40888023376465),
        Note.new([144, 62, 64], 0.1, 224.5461940765381),
        Note.new([144, 64, 58], 0.1, 218.4748649597168),
        Note.new([144, 65, 64], 0.1, 189.4831657409668),
        Note.new([144, 59, 65], 0.1, 206.4361572265625),
        Note.new([144, 62, 62], 0.1, 224.05099868774414),
        Note.new([144, 64, 68], 0.1, 207.5800895690918),
        Note.new([144, 65, 60], 0.1, 219.43306922912598),
        Note.new([144, 59, 63], 0.1, 172.61004447937012),
        Note.new([144, 62, 63], 0.1, 276.0279178619385),
        Note.new([144, 64, 64], 0.1, 224.43485260009766),
        Note.new([144, 65, 68], 0.1, 200.9291648864746),
        Note.new([144, 59, 72], 0.1, 195.56188583374023),
        Note.new([144, 62, 63], 0.1, 184.01479721069336),
        Note.new([144, 64, 66], 0.1, 204.4541835784912),
        Note.new([144, 65, 70], 0.1, 201.49993896484375),
        Note.new([144, 59, 60], 0.1, 235.95595359802246),
        Note.new([144, 62, 64], 0.1, 185.57000160217285),
        Note.new([144, 64, 71], 0.1, 227.47087478637695),
        Note.new([144, 65, 68], 0.1, 211.90810203552246),
        Note.new([144, 59, 61], 0.1, 237.37382888793945),
        Note.new([144, 62, 59], 0.1, 131.48021697998047),
        Note.new([144, 64, 70], 0.1, 239.04109001159668),
        Note.new([144, 65, 65], 0.1, 220.44610977172852),
        Note.new([144, 59, 61], 0.1, 219.96498107910156),
        Note.new([144, 62, 64], 0.1, 117.3560619354248),
        Note.new([144, 64, 64], 0.1, 204.53619956970215),
        Note.new([144, 65, 66], 0.1, 178.43890190124512),
        Note.new([144, 59, 60], 0.1, 185.4252815246582),
        Note.new([144, 62, 64], 0.1, 141.98994636535645),
        Note.new([144, 64, 69], 0.1, 228.49702835083008),
        Note.new([144, 65, 54], 0.1, 207.94200897216797)]

        real = [
        Note.new([144, 50, 53], 0.3, 724.5540618896484),
        Note.new([144, 59, 69], 0.3, 283.49781036376953),
        Note.new([144, 60, 72], 0.3, 157.03487396240234),
        Note.new([144, 59, 78], 0.3, 173.42805862426758),
        Note.new([144, 50, 70], 0.3, 151.61585807800293),
        Note.new([144, 59, 74], 0.3, 120.94688415527344),
        Note.new([144, 60, 69], 0.3, 167.5560474395752),
        Note.new([144, 59, 75], 0.3, 156.90279006958008),
        Note.new([144, 50, 69], 0.3, 131.4830780029297),
        Note.new([144, 59, 72], 0.3, 139.96577262878418),
        Note.new([144, 60, 74], 0.3, 150.35200119018555),
        Note.new([144, 59, 73], 0.3, 165.94290733337402),
        Note.new([144, 50, 61], 0.3, 142.91715621948242),
        Note.new([144, 59, 72], 0.3, 118.53194236755371),
        Note.new([144, 60, 73], 0.3, 146.4822292327881),
        Note.new([144, 59, 74], 0.3, 149.06597137451172),
        Note.new([144, 50, 65], 0.3, 140.02513885498047),
        Note.new([144, 59, 72], 0.3, 88.43278884887695),
        Note.new([144, 60, 75], 0.3, 147.99189567565918),
        Note.new([144, 59, 75], 0.3, 158.94389152526855),
        Note.new([144, 50, 68], 0.3, 130.357027053833),
        Note.new([144, 59, 67], 0.3, 104.47192192077637),
        Note.new([144, 60, 73], 0.3, 156.8288803100586),
        Note.new([144, 59, 75], 0.3, 148.87404441833496),
        Note.new([144, 50, 67], 0.3, 138.02599906921387),
        Note.new([144, 59, 69], 0.3, 81.36606216430664),
        Note.new([144, 60, 73], 0.3, 139.07718658447266),
        Note.new([144, 59, 76], 0.3, 148.4847068786621),
        Note.new([144, 50, 68], 0.3, 109.54904556274414),
        Note.new([144, 59, 67], 0.3, 70.82009315490723),
        Note.new([144, 60, 74], 0.3, 129.9152374267578),
        Note.new([144, 59, 72], 0.3, 144.56486701965332),
        Note.new([144, 50, 70], 0.3, 148.85497093200684),
        Note.new([144, 59, 67], 0.3, 81.5119743347168),
        Note.new([144, 60, 68], 0.3, 130.39112091064453),
        Note.new([144, 59, 79], 0.3, 147.02820777893066)]

        hmm = HMM.new()
        hmm.add_notes(real_2)
        hmm.process
        hmm.print_probabilities

        viterbi = Viterbi.new(real_2,hmm)
        viterbi.robust
          puts "robust observation sequence\n"
        obs = viterbi.obs_seq
        obs.each do |o|
          puts "#{o.data[1]}, #{o.rel_ts}"
        end
        puts ""

        viterbi.run
        viterbi.find_path
        viterbi.print_path

        pi = PatternInference.new              
        viterbi.obs_seq.each do |obs|
          el = PatternElement.new(obs)
          pi.find_pattern(el)
        end
        pi.permute(hmm)
        pattern = pi.best
        pattern.elements.each do |el|
          puts "#{el.data[1]}, #{el.mean_ts}"
        end
    end
  end
end